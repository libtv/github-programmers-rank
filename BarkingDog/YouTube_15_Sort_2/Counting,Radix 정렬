1. CountingSort

1 5 4 2 3 1 4 3
오름차순 정렬을 하고싶다?

정렬을 한번 꽁으로 먹어보자

1 2 3 4 5
2 1 2 2 1

이 표는 각 숫자에 대한 개수를 나타낸 표이다.
이 표를 기반으로 순서대로

1 1 2 3 3 4 4 5 정렬하면 끝이다. -> 카운팅 소트
정렬 알고리즘 중에서 가장 쉬운 알고리즘이다.

수의 범위가 어느정도 한정적일 때에만 카운팅 소트를 쓸 수 있다.
대략적으로 코테에서는 숫자의 범위가 1000만이하면 사용 가능하다.

2. RadixSort 기수 정렬

자릿수를 이용해서 정렬을 수행하는 알고리즘으로, 카운팅 소트를 응용한 알고리즘이라고도 생각할 수 있다.

012 421 046 764 103 502 007 100 021 545 이 10개의 수를 라딕스 소트로 정렬해보겠다.

   이렇게 10개의 리트스를 만든다. 각 숫자의 1의자리에 해당하는 리스트에 넣어준다.  ex) 012는 2로
0  100
1  421 021
2  012 502
3  103
4  674
5  545
6  046
7  007
8
9

이제 각 리스트에서 숫자를 순서대로 꺼낸다.

-> 100 421 021 012 502 103 674 545 046 007

지금 이 수열은 1의 자리를 기준으로 재배열되었다.

1의 자리에서 한 것과 마찬가지로 10의 자리도 해준다.

0 100 502 103 007
1 012
2 421 021
3
4 545 046
5
6
7 674
8
9

리스트에서 숫자를 꺼낸다.
-> 100 502 103 007 012 421 021 545 046 674

이제 100의 자리로 재배열 한다.
0  007 012 021 046
1  100 103
2
3
4  421
5  502 545
6  674
7
8
9
리스트에서 숫자를 꺼낸다.
-> 007 012 021 046 100 103 421 502 545 674

오름차순으로 정렬 완료!

Comparisono Sort, Non-Comparison Sort
버블 소트           카운팅 소트
머지 소트           라딕스 소트
퀵 소트
